worker_processes  16;
error_log /usr/local/openresty/nginx/logs/perror.log;
pid       /usr/local/openresty/nginx/logs/nginx.pid;
events {
    worker_connections 1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /usr/local/openresty/nginx/logs/paccess.log  main;
    open_log_file_cache off;

    # See Move default writable paths to a dedicated directory (#119)
    # https://github.com/openresty/docker-openresty/issues/119
    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  60;

    #gzip  on;

    upstream backend {
        server 192.168.1.62:9006;
        server 192.168.1.65:9007;
        server 192.168.1.203:9008;
        server 192.168.1.186:9009;
    }

    server {
        listen 0.0.0.0:80;
        proxy_connect_timeout 3s;
        #server_name  127.0.0.1;
        #resolver 1.1.1.1;
        location = /upstreams {
            default_type text/plain;
            content_by_lua_block {
                local http = require "resty.http"
                local httpc = http.new()
                local upstream = require "ngx.upstream"
                local get_servers = upstream.get_servers
                local get_upstreams = upstream.get_upstreams
                local us = get_upstreams()
                for _, u in ipairs(us) do
                    ngx.say("upstream ", u, ":")
                    local srvs, err = get_servers(u)
                    if not srvs then
                        ngx.log(ngx.ERR,"failed to get servers in upstream ", u)
                    else
                        for _, srv in ipairs(srvs) do
                            local res, err = httpc:request_uri("http://"..srv["addr"])
                            if res.status == ngx.HTTP_OK then
                                ngx.print(res.body)
                            else
                                ngx.print(res.status)
                            end
                            ngx.print("\n")
                        end
                    end
                end
            }
        }

        location / {
            proxy_pass http://backend;
        }
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
        root   /usr/local/openresty/nginx/html;
        }
    }
}